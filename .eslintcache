[{"C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\App\\App.js":"1","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\actions\\index.js":"2","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\Sidebar\\SidebarChat\\SidebarChat.js":"3","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\reportWebVitals.js":"4","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\reducers\\index.js":"5","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\Sidebar\\Sidebar.js":"6","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\ChatScreen\\ChatScreen.js":"7","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\Chat\\Chat.js":"8","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\Welcome\\Welcome.js":"9","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\ButtonLoader\\ButtonLoader.js":"10","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\axios.js":"11","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\LandingPage\\LandingPage.js":"12","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\index.js":"13","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\reducers\\chatDataReducer.js":"14"},{"size":1692,"mtime":1613584043821,"results":"15","hashOfConfig":"16"},{"size":924,"mtime":1613331862774,"results":"17","hashOfConfig":"16"},{"size":3224,"mtime":1613406853634,"results":"18","hashOfConfig":"16"},{"size":375,"mtime":1607352120290,"results":"19","hashOfConfig":"16"},{"size":1118,"mtime":1613331803300,"results":"20","hashOfConfig":"16"},{"size":5551,"mtime":1613408418737,"results":"21","hashOfConfig":"16"},{"size":3625,"mtime":1613331842197,"results":"22","hashOfConfig":"16"},{"size":8907,"mtime":1613406903681,"results":"23","hashOfConfig":"16"},{"size":2575,"mtime":1613586249162,"results":"24","hashOfConfig":"16"},{"size":816,"mtime":1613332101950,"results":"25","hashOfConfig":"16"},{"size":151,"mtime":1613408522053,"results":"26","hashOfConfig":"16"},{"size":5799,"mtime":1613585255463,"results":"27","hashOfConfig":"16"},{"size":960,"mtime":1613328498771,"results":"28","hashOfConfig":"16"},{"size":205,"mtime":1608214205986,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"vzluok",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\App\\App.js",["66"],"//Essentials\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Welcome from \"../Welcome/Welcome\";\r\nimport ChatScreen from \"../ChatScreen/ChatScreen\";\r\n\r\n//redux imports\r\nimport { connect } from \"react-redux\";\r\nimport { logIn, logOut, setUser, setUserAvatarName } from \"../../actions\";\r\nimport LandingPage from \"../LandingPage/LandingPage\";\r\n\r\nfunction App({\r\n    loggedIn,\r\n    userData,\r\n    logIn,\r\n    logOut,\r\n    setUser,\r\n    setUserAvatarName,\r\n}) {\r\n    useEffect(() => {\r\n        const user = localStorage.getItem(\"userData\");\r\n        const userAvatarName = localStorage.getItem(\"userAvatarName\");\r\n        if (user) {\r\n            setUser(user);\r\n        }\r\n        if (userAvatarName) {\r\n            setUserAvatarName(userAvatarName);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    //ChatScreen\r\n\r\n    return (\r\n        // <Router>\r\n        <div className=\"app\">\r\n            <div className=\"app_body\">\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={LandingPage} />\r\n                        <Route exact path=\"/main\">\r\n                            {loggedIn ? <ChatScreen /> : <Welcome />}\r\n                        </Route>\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </div>\r\n        </div>\r\n\r\n        // </Router>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { loggedIn: state.loginStatus, userData: state.userData };\r\n};\r\nexport default connect(mapStateToProps, {\r\n    logIn: logIn,\r\n    logOut: logOut,\r\n    setUser,\r\n    setUserAvatarName,\r\n})(App);\r\n","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\actions\\index.js",[],["67","68"],"C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\Sidebar\\SidebarChat\\SidebarChat.js",["69","70","71"],"import { Avatar } from \"@material-ui/core\";\r\nimport React, { useRef, useLayoutEffect, useMemo } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport { AvatarGenerator } from \"random-avatar-generator\";\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: \"#44b700\",\r\n        color: \"#44b700\",\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        \"&::after\": {\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            borderRadius: \"50%\",\r\n            // animation: \"$ripple 1.2s infinite ease-in-out\",\r\n            border: \"1px solid currentColor\",\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    \"@keyframes ripple\": {\r\n        \"0%\": {\r\n            transform: \"scale(.8)\",\r\n            opacity: 1,\r\n        },\r\n        \"100%\": {\r\n            transform: \"scale(2.4)\",\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n        large: {\r\n            width: theme.spacing(5),\r\n            height: theme.spacing(5),\r\n        },\r\n    },\r\n}));\r\n\r\nfunction SidebarChat({ contact, selectedContact }) {\r\n    const classes = useStyles();\r\n    const sidechat = useRef();\r\n    let active = false;\r\n    useLayoutEffect(() => {\r\n        //use this in SideChat with useRef\r\n\r\n        const observer = new IntersectionObserver((entry) => {\r\n            if (entry[0].intersectionRatio > 0) {\r\n                entry[0].target.style.animation = `anim1 1s`;\r\n                entry[0].target.dataset.triggered = true;\r\n            } else {\r\n                entry[0].target.style.animation = \"none\";\r\n            }\r\n        });\r\n        //  const sideChat =  document.querySelector('.sidebarChat');\r\n        //  console.log(sideChat)\r\n\r\n        observer.observe(sidechat.current);\r\n\r\n        return () => {\r\n            observer.unobserve(sidechat.current);\r\n        };\r\n    }, []);\r\n\r\n    if (contact && selectedContact && selectedContact[0] === contact[0]) {\r\n        active = true;\r\n    }\r\n    const generator = new AvatarGenerator();\r\n    const avatarIcon = useMemo(() => generator.generateRandomAvatar(), []);\r\n    return (\r\n        <>\r\n            <div className=\"sidebarChat\" ref={sidechat}>\r\n                <div className={classes.root}>\r\n                    <StyledBadge\r\n                        overlap=\"circle\"\r\n                        anchorOrigin={{\r\n                            vertical: \"top\",\r\n                            horizontal: \"right\",\r\n                        }}\r\n                        variant=\"dot\"\r\n                    >\r\n                        <Avatar className={classes.large} src={avatarIcon} />\r\n                    </StyledBadge>\r\n                </div>\r\n                <div className=\"sidebarChat_info\">\r\n                    <h2>{contact[1]}</h2>\r\n                    {/* <p>This is the last message</p> */}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SidebarChat;\r\n","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\reportWebVitals.js",[],["72","73"],"C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\reducers\\index.js",[],"C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\Sidebar\\Sidebar.js",["74","75","76","77","78","79","80"],"C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\ChatScreen\\ChatScreen.js",["81","82","83","84"],"import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"../../axios\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\nimport Chat from \"../Chat/Chat\";\r\n\r\n//redux\r\nimport { connect } from \"react-redux\";\r\nimport { logIn, logOut, setUser, fetchChatData } from \"../../actions\";\r\n\r\n// const { whyDidYouUpdate } = require('why-did-you-update');\r\n// whyDidYouUpdate(React);\r\n\r\nconst ChatScreen = ({ userData, chatData, fetchChatData, dispatch }) => {\r\n    const [selectedContact, setSelectedContact] = useState(null);\r\n    const [selectedContactA, setSelectedContactA] = useState(null);\r\n    const [chatDataFiltered, setChatDataFiltered] = useState();\r\n\r\n    //Old Functionality\r\n\r\n    // const addAndRefreshLocation = (userData) => {\r\n    //     if (navigator.geolocation) {\r\n    //         navigator.geolocation.getCurrentPosition(async (data, err) => {\r\n    //             const { lat, lon } = {\r\n    //                 lat: data.coords.latitude,\r\n    //                 lon: data.coords.longitude,\r\n    //             };\r\n    //             const res = await axios.post(`/users/addUserToRedis`, {\r\n    //                 id: userData,\r\n    //                 lat: lat,\r\n    //                 lon: lon,\r\n    //             });\r\n    //             console.log(res.data);\r\n    //         });\r\n    //     }\r\n    // };\r\n\r\n    useEffect(() => {\r\n        if (userData !== null) {\r\n            fetchChatData(userData);\r\n        }\r\n        // addAndRefreshLocation(userData);\r\n        // eslint-disable-next-line\r\n    }, [userData]);\r\n\r\n    useEffect(() => {\r\n        const filtered =\r\n            chatData &&\r\n            chatData.map((data) => {\r\n                return {\r\n                    conversationId: data._id,\r\n\r\n                    pair: data.pair,\r\n                    messages: data.messages,\r\n                };\r\n            });\r\n        setChatDataFiltered(filtered);\r\n        let contacts = [];\r\n\r\n        if (chatData) {\r\n            contacts = chatData.map((item) => {\r\n                let filteredContact = item.pair.filter(\r\n                    (user) => user !== JSON.parse(userData)\r\n                );\r\n\r\n                return filteredContact;\r\n            });\r\n        }\r\n\r\n        let userSpecificChatData = null;\r\n        if (chatDataFiltered) {\r\n            if (selectedContact) {\r\n                userSpecificChatData = chatDataFiltered.filter((data) =>\r\n                    data.pair.includes(selectedContact[0])\r\n                );\r\n            }\r\n        }\r\n\r\n    }, [chatData]);\r\n\r\n    return (\r\n        <>\r\n            {/* <Sidebar contacts={contacts} selectedContact={selectedContact} setSelectedContact={setSelectedContact} />\r\n    <Chat chatData={userSpecificChatData && userSpecificChatData[0]} selectedContact={selectedContact} />\r\n     */}\r\n\r\n            <div className=\"chat-page\">\r\n                <div className=\"chat-body\">\r\n                    <Sidebar\r\n                        selectedContact={selectedContact}\r\n                        setSelectedContact={setSelectedContact}\r\n                        setSelectedContactA={setSelectedContactA}\r\n                    />\r\n                    <Chat\r\n                        selectedContact={selectedContact}\r\n                        selectedContactA={selectedContactA}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { userData: state.userData, chatData: state.chatData };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    logIn: logIn,\r\n    logOut: logOut,\r\n    setUser,\r\n    fetchChatData,\r\n})(ChatScreen);\r\n","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\Chat\\Chat.js",["85","86","87","88","89","90"],"import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React, { useState, useCallback, useMemo } from \"react\";\r\nimport SearchOutlinedIcon from \"@material-ui/icons/SearchOutlined\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport axios from \"../../axios\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport { useEffect } from \"react\";\r\nimport Pusher from \"pusher-js\";\r\nimport SendRoundedIcon from \"@material-ui/icons/SendRounded\";\r\nimport { AvatarGenerator } from \"random-avatar-generator\";\r\n\r\n//redux imports\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction Chat({ userData, chatData, selectedContact, selectedContactA }) {\r\n    const [conversationId, setConversationId] = useState(null);\r\n    const [messages, setMessages] = useState(null);\r\n    const [input, setInput] = useState(\"\");\r\n    // console.log(chatData)\r\n    useEffect(() => {\r\n        if (chatData) {\r\n            let filteredData = chatData.map((data) => {\r\n                let contact = data.pair.filter(\r\n                    (user) => user !== JSON.parse(userData)\r\n                );\r\n\r\n                return {\r\n                    contact: contact[0],\r\n                    conversationId: data._id,\r\n                    messages: data.messages,\r\n                };\r\n            });\r\n            setMessages(filteredData);\r\n        }\r\n    }, [chatData, userData]);\r\n\r\n    //   useEffect(() => {\r\n    //     if(chatData)\r\n    //         setConversationId(chatData.conversationId)\r\n    //   }, [chatData]);\r\n\r\n    const setRef = useCallback((node) => {\r\n        if (node) {\r\n            node.scrollIntoView({ smooth: true });\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // eslint-disable-next-line\r\n        messages &&\r\n            messages.map((message) => {\r\n                if (message.contact === selectedContact) {\r\n                    setConversationId(message.conversationId);\r\n                }\r\n            });\r\n    }, [selectedContact, messages]);\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n\r\n        var date = new Date();\r\n        var time = date.toLocaleTimeString([], { timeStyle: \"short\" });\r\n        await axios.post(\"/messages/new\", {\r\n            _id: conversationId,\r\n            message: {\r\n                senderId: JSON.parse(userData),\r\n                Timestamp: time,\r\n                message: input,\r\n            },\r\n            Timestamp: Math.floor(Date.now() / 1000),\r\n        });\r\n        setInput(\"\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        var pusher = new Pusher(\"22eb68a8a51cd8776df3\", {\r\n            cluster: \"ap2\",\r\n        });\r\n\r\n        const channels =\r\n            messages &&\r\n            messages.map((message) => {\r\n                let channel = pusher.subscribe(\r\n                    `conversation_${message.conversationId}`\r\n                );\r\n                channel.bind(\"updated\", function (newMessage) {\r\n                    setMessages(\r\n                        messages.map((message) => {\r\n                            if (\r\n                                message.conversationId !==\r\n                                newMessage.Message._id\r\n                            ) {\r\n                                return message;\r\n                            }\r\n\r\n                            return {\r\n                                ...message,\r\n                                messages: [\r\n                                    ...message.messages,\r\n                                    newMessage.Message.message,\r\n                                ],\r\n                            };\r\n                        })\r\n                    );\r\n                });\r\n                return channel;\r\n            });\r\n\r\n        //cleanup function\r\n        return () => {\r\n            // eslint-disable-next-line\r\n            channels &&\r\n                channels.map((channel) => {\r\n                    channel.unbind_all();\r\n                    channel.unsubscribe();\r\n                });\r\n        };\r\n        //messages\r\n    }, [messages]);\r\n    const generator = new AvatarGenerator();\r\n    const avatarIcon = useMemo(() => generator.generateRandomAvatar(), []);\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat_header\">\r\n                <div>\r\n                    {selectedContact ? (\r\n                        <Avatar\r\n                            style={{ width: \"55px\", height: \"55px\" }}\r\n                            src={avatarIcon}\r\n                        />\r\n                    ) : null}\r\n                </div>\r\n\r\n                <div className=\"chat_headerInfo\">\r\n                    <h3>{selectedContactA}</h3>\r\n                    {/* <p>Last seen at...</p> */}\r\n                </div>\r\n\r\n                <div className=\"chat_headerRight\">\r\n                    <IconButton>\r\n                        <MoreVertIcon\r\n                            style={{ color: \" rgba(175, 172, 172, 0.788)\" }}\r\n                        />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    height: \"10px\",\r\n                    background: \"none\",\r\n                    borderBottom: \"1px solid rgba(199, 197, 197, 0.411)\",\r\n                    width: \"90%\",\r\n                    alignSelf: \"center\",\r\n                    color: \"black\",\r\n                }}\r\n            />\r\n            <div className=\"chat_body\">\r\n                {\r\n                    // eslint-disable-next-line\r\n                    messages &&\r\n                        messages.map((messageData) => {\r\n                            if (messageData.contact === selectedContact) {\r\n                                return messageData.messages.map(\r\n                                    (message, index) => {\r\n                                        const lastMessage =\r\n                                            messageData.messages.length - 1 ===\r\n                                            index;\r\n                                        let own = false;\r\n                                        if (\r\n                                            message.senderId ===\r\n                                            JSON.parse(userData)\r\n                                        ) {\r\n                                            own = true;\r\n                                        }\r\n\r\n                                        return (\r\n                                            <p\r\n                                                key={uuidV4()}\r\n                                                ref={\r\n                                                    lastMessage ? setRef : null\r\n                                                }\r\n                                                className={`chat_message ${\r\n                                                    own && \"chat_reciever\"\r\n                                                }`}\r\n                                            >\r\n                                                {message.message}\r\n                                                <span className=\"chat_timestamp\">\r\n                                                    {message.Timestamp}\r\n                                                </span>\r\n                                            </p>\r\n                                        );\r\n                                    }\r\n                                );\r\n                            }\r\n                        })\r\n                }\r\n            </div>\r\n            {selectedContact ? (\r\n                <div className=\"chat_footer\">\r\n                    <InsertEmoticonIcon />\r\n                    <form>\r\n                        <input\r\n                            value={input}\r\n                            placeholder=\"Type a message...\"\r\n                            type=\"text\"\r\n                            onChange={(e) => setInput(e.target.value)}\r\n                        />\r\n                        <button type=\"submit\" onClick={sendMessage}>\r\n                            Send a message\r\n                        </button>\r\n                    </form>\r\n                    <IconButton className=\"rotated-icon\">\r\n                        <AttachFileIcon className=\"attach-file-icons\" />\r\n                    </IconButton>\r\n                    <div className=\"btn\">\r\n                        <span className=\"send-icon\">\r\n                            <SendRoundedIcon style={{ fontSize: \"2rem\" }} />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { userData: state.userData, chatData: state.chatData };\r\n};\r\nexport default connect(mapStateToProps)(Chat);\r\n",["91","92"],"C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\Welcome\\Welcome.js",["93"],"C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\ButtonLoader\\ButtonLoader.js",[],"C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\axios.js",[],"C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\components\\LandingPage\\LandingPage.js",["94","95","96","97"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./LandingPage.scss\";\r\nimport \"./NavBar.scss\";\r\n\r\nimport MainSvg from \"./Assets/Main.svg\";\r\nimport AnonymityLogo from \"./Assets/letterBox.svg\";\r\nimport FirstSection from \"./Assets/firstSection.svg\";\r\nimport SecondSection from \"./Assets/secondSection.svg\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// Logos\r\nimport { GrFacebook } from \"react-icons/gr\";\r\nimport { SiGmail, SiLinkedin, SiTwitter } from \"react-icons/si\";\r\n\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { motion, useViewportScroll, useTransform } from \"framer-motion\";\r\n\r\nconst LandingPage = () => {\r\n    const ref = useRef(null);\r\n    const { scrollYProgress } = useViewportScroll(ref);\r\n    const opacity = useTransform(scrollYProgress, [0, 0.5, 1], [0, 1, 1]);\r\n    const history = useHistory();\r\n    return (\r\n        <div ref={ref} className=\"welcome-container\">\r\n            <motion.div style={{ opacity }} className=\"NavBarContainer\">\r\n                <h1 className=\"NavBar-header\">Anonymity</h1>\r\n                <div className=\"NavBar-options\">\r\n                    <h5\r\n                        className=\"NavBar-option\"\r\n                        onClick={(e) => history.push(\"/main\")}\r\n                    >\r\n                        Sign In\r\n                    </h5>\r\n                    <h5\r\n                        className=\"NavBar-option\"\r\n                        onClick={(e) => history.push(\"/main\")}\r\n                    >\r\n                        Sign Up\r\n                    </h5>\r\n                    <h5 className=\"NavBar-option\">Help</h5>\r\n                </div>\r\n            </motion.div>\r\n            <div className=\"welcome-container__first-section\">\r\n                <div className=\"welcome-container__first-section__container\">\r\n                    {/* <img\r\n                        src={AnonymityLogo}\r\n                        alt=\"logo\"\r\n                        className=\"welcome-container__first-section__container-logo\"\r\n                    /> */}\r\n                    <img\r\n                        src={MainSvg}\r\n                        alt=\"first-section-pic\"\r\n                        className=\"welcome-container__first-section__container-pic\"\r\n                    />\r\n                    <div className=\"welcome-container__first-section__container-header\">\r\n                        Anonymity\r\n                        <span\r\n                            style={{\r\n                                width: \"15px\",\r\n                                height: \"15px\",\r\n                                background: \"#407DDA\",\r\n                                borderRadius: \"50%\",\r\n                                display: \"inline-block\",\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"welcome-container__second-section\">\r\n                <div className=\"welcome-container__second-section__first\">\r\n                    <div className=\"welcome-container__second-section__first-text\">\r\n                        Text anonymously <br />\r\n                        Anywhere. Anyone.\r\n                    </div>\r\n                    <div className=\"welcome-container__second-section__first-image\">\r\n                        <img src={FirstSection} alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"welcome-container__second-section__second\">\r\n                    <div className=\"welcome-container__second-section__second-image\">\r\n                        <img src={SecondSection} alt=\"\" />\r\n                    </div>\r\n                    <div className=\"welcome-container__second-section__second-text\">\r\n                        Find new people, <br /> Express and Evolve.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"welcome-container__LetsGo\">\r\n                <button\r\n                    onClick={(e) => history.push(\"/main\")}\r\n                    className=\"welcome-container__LetsGo-button\"\r\n                >\r\n                    Let's Go\r\n                </button>\r\n            </div>\r\n            <div className=\"welcome-container__footer-section\">\r\n                <div className=\"welcome-container__footer-section__first\">\r\n                    <h3 className=\"welcome-container__footer-section__first-header\">\r\n                        Anonymity\r\n                    </h3>\r\n                    <div className=\"welcome-container__footer-section__first-logos-container\">\r\n                        <h3>Contact Us</h3>\r\n                        <GrFacebook className=\"welcome-container__footer-section__first-logos-container__logo\" />\r\n                        <SiGmail className=\"welcome-container__footer-section__first-logos-container__logo\" />\r\n                        <SiLinkedin className=\"welcome-container__footer-section__first-logos-container__logo\" />\r\n                        <SiTwitter className=\"welcome-container__footer-section__first-logos-container__logo\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"welcome-container__footer-section__second\">\r\n                    <h3 className=\"welcome-container__footer-section__second-header\">\r\n                        About us\r\n                    </h3>\r\n                    <p className=\"welcome-container__footer-section__second-sub\">\r\n                        This website is a mixture of Tinder and Omegle, you can\r\n                        connect to anyone you want to within a given distance\r\n                        maintaining complete anonymity hence the name anonymity.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LandingPage;\r\n","C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\index.js",[],"C:\\MyProjects\\ANONYMITY\\Anonymity-frontend\\src\\reducers\\chatDataReducer.js",[],{"ruleId":"98","severity":1,"message":"99","line":2,"column":17,"nodeType":"100","messageId":"101","endLine":2,"endColumn":25},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":70,"column":41,"nodeType":"100","endLine":70,"endColumn":48},{"ruleId":"98","severity":1,"message":"108","line":75,"column":9,"nodeType":"100","messageId":"101","endLine":75,"endColumn":15},{"ruleId":"106","severity":1,"message":"109","line":78,"column":72,"nodeType":"110","endLine":78,"endColumn":74,"suggestions":"111"},{"ruleId":"102","replacedBy":"112"},{"ruleId":"104","replacedBy":"113"},{"ruleId":"98","severity":1,"message":"114","line":2,"column":18,"nodeType":"100","messageId":"101","endLine":2,"endColumn":28},{"ruleId":"98","severity":1,"message":"115","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":20},{"ruleId":"98","severity":1,"message":"116","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":26},{"ruleId":"98","severity":1,"message":"117","line":7,"column":8,"nodeType":"100","messageId":"101","endLine":7,"endColumn":15},{"ruleId":"98","severity":1,"message":"118","line":15,"column":8,"nodeType":"100","messageId":"101","endLine":15,"endColumn":18},{"ruleId":"106","severity":1,"message":"119","line":53,"column":8,"nodeType":"110","endLine":53,"endColumn":28,"suggestions":"120"},{"ruleId":"106","severity":1,"message":"109","line":85,"column":72,"nodeType":"110","endLine":85,"endColumn":74,"suggestions":"121"},{"ruleId":"98","severity":1,"message":"122","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":13},{"ruleId":"98","severity":1,"message":"123","line":61,"column":13,"nodeType":"100","messageId":"101","endLine":61,"endColumn":21},{"ruleId":"98","severity":1,"message":"124","line":73,"column":17,"nodeType":"100","messageId":"101","endLine":73,"endColumn":37},{"ruleId":"106","severity":1,"message":"125","line":79,"column":8,"nodeType":"110","endLine":79,"endColumn":18,"suggestions":"126"},{"ruleId":"98","severity":1,"message":"116","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":26},{"ruleId":"98","severity":1,"message":"127","line":7,"column":8,"nodeType":"100","messageId":"101","endLine":7,"endColumn":15},{"ruleId":"128","severity":1,"message":"129","line":54,"column":36,"nodeType":"130","messageId":"131","endLine":54,"endColumn":38},{"ruleId":"128","severity":1,"message":"129","line":116,"column":40,"nodeType":"130","messageId":"131","endLine":116,"endColumn":42},{"ruleId":"106","severity":1,"message":"109","line":124,"column":72,"nodeType":"110","endLine":124,"endColumn":74,"suggestions":"132"},{"ruleId":"128","severity":1,"message":"133","line":164,"column":52,"nodeType":"130","messageId":"134","endLine":164,"endColumn":54},{"ruleId":"102","replacedBy":"135"},{"ruleId":"104","replacedBy":"136"},{"ruleId":"98","severity":1,"message":"137","line":1,"column":10,"nodeType":"100","messageId":"101","endLine":1,"endColumn":16},{"ruleId":"98","severity":1,"message":"138","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":26},{"ruleId":"98","severity":1,"message":"99","line":1,"column":36,"nodeType":"100","messageId":"101","endLine":1,"endColumn":44},{"ruleId":"98","severity":1,"message":"139","line":6,"column":8,"nodeType":"100","messageId":"101","endLine":6,"endColumn":21},{"ruleId":"98","severity":1,"message":"140","line":15,"column":10,"nodeType":"100","messageId":"101","endLine":15,"endColumn":19},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["141"],"no-negated-in-lhs",["142"],"react-hooks/exhaustive-deps","The ref value 'sidechat.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'sidechat.current' to a variable inside the effect, and use that variable in the cleanup function.","'active' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'generator'. Either include it or remove the dependency array.","ArrayExpression",["143"],["141"],["142"],"'IconButton' is defined but never used.","'MoreVertIcon' is defined but never used.","'SearchOutlinedIcon' is defined but never used.","'AddIcon' is defined but never used.","'SearchIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'userAvatarName'. Either include it or remove the dependency array.",["144"],["145"],"'axios' is defined but never used.","'contacts' is assigned a value but never used.","'userSpecificChatData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chatDataFiltered', 'selectedContact', and 'userData'. Either include them or remove the dependency array.",["146"],"'MicIcon' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["147"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd",["141"],["142"],"'Button' is defined but never used.","'useEffect' is defined but never used.","'AnonymityLogo' is defined but never used.","'useInView' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"148","fix":"152"},{"desc":"153","fix":"154"},{"desc":"148","fix":"155"},"Update the dependencies array to be: [generator]",{"range":"156","text":"157"},"Update the dependencies array to be: [chatData, userAvatarName, userData]",{"range":"158","text":"159"},{"range":"160","text":"157"},"Update the dependencies array to be: [chatData, chatDataFiltered, selectedContact, userData]",{"range":"161","text":"162"},{"range":"163","text":"157"},[2389,2391],"[generator]",[1693,1713],"[chatData, userAvatarName, userData]",[3041,3043],[2522,2532],"[chatData, chatDataFiltered, selectedContact, userData]",[4305,4307]]